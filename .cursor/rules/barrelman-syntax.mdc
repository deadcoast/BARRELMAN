---
description: 
globs: **/*.bman,src/lexer.py,src/test_early_lexer/**/*.py
alwaysApply: false
---
---
description: BARRELMAN is a custom domain-specific language that uses a unique structure with declarations, relations, modifiers, and triggers. This guide explains the syntax components and conventions.
globs: **/*.bman, src/lexer.py, src/test_early_lexer/**/*.py
---

# Core Syntax Elements

### 1. Declaration Zone
- `::` - Standard declaration marker
- `:^:` - Nesting port declaration (indicates a branch point)
- Indentation levels determine hierarchy

### 2. Relation Zone
- Follows immediately after declaration
- Separated by `//` from other zones
- Example: `:: HUMAN RACE // EVOLUTION RATE`

### 3. Modifier Zone
- Introduced by `%` symbol
- Contains modifying information 
- Example: `% +476 PERCENTILE`

### 4. Trigger Zone
- Introduced by `->` symbol
- Usually indicates causality or outcomes
- Example: `-> SISTER RACES [1-3]`

## Syntax Rules

- Indentation defines nesting structure
- Each line should follow the pattern: `[DECLARATION] [RELATION] // [MODIFIER] [TRIGGER]`
- Declarations must be at the start of a line or have appropriate indentation
- The `//` separator is required between relation and other zones

## Examples

```
:: INTELLIGENCE // EARTH NOT RARE % HUMAN RARE
 :^: EARTH // 1 OF 302,973 % BIRTH CONSCIOUS LIFEFORM
  :: EARTH // 1 OF 1 % ESCAPE PLANETARY SILENCE
```

In this example:
- First line: Standard declaration with modifier
- Second line: Nesting port declaration (`:^:`) with one level of indentation
- Third line: Standard declaration with two levels of indentation (nested under the port)

## Parsing Strategy

The BARRELMAN lexer tokenizes each line into:
1. `zone_1_declaration`: The declaration marker (`::` or `:^:`)
2. `zone_1_relation`: Content before the `//` separator
3. `zone_2_modifier`: Content after `%` symbol
4. `zone_3_trigger`: Content after `->` symbol
5. `zone_4_outcome`: Inferred from modifier and trigger
6. `indent_level`: Calculated from leading spaces
7. `is_nesting_port`: Boolean indicating if the line uses `:^:`

## Visualization

BARRELMAN syntax can be visualized as a tree structure where:
- Each declaration is a node
- Indentation determines parent-child relationships
- Nesting ports create branch points
- Relations, modifiers, and triggers provide node metadata
